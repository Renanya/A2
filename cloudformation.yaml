AWSTemplateFormatVersion: '2010-09-09'
Description: |
  Launch an Ubuntu EC2 instance for Assessment 2 (Group 4) with Cognito, S3 and Parameters.

Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.

  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    AllowedValues:
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - t2.xlarge
      - t2.2xlarge
      - t3.nano
      - t3.micro
      - t3.small
      - t3.medium
      - t3.large
      - t3.xlarge
      - t3.2xlarge
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - c5.large
      - c5.xlarge
      - c5.2xlarge
      - c5.4xlarge
      - c5.9xlarge
      - g3.8xlarge
      - r5.large
      - r5.xlarge
      - r5.2xlarge
      - r5.4xlarge
      - i3.xlarge
      - i3.2xlarge
      - i3.4xlarge
      - i3.8xlarge
      - d2.xlarge
      - d2.2xlarge
      - d2.4xlarge
      - d2.8xlarge
    Default: t3.medium
    AllowedPattern: ^[a-z0-9.]+$
    Description: EC2 instance type

  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Default: n11288353
    Description: Existing EC2 key pair name

  SubnetId:
    Type: AWS::EC2::Subnet::Id
    Default: subnet-075811427d5564cf9
    Description: Subnet to place the instance in

  QutUsername:
    Type: String
    Default: n11288353@qut.edu.au
    Description: Your QUT username (for tagging)
  QutUsername2:
    Type: String
    Default: n8319065@qut.edu.au
    Description: Your partner's QUT username (for tagging)
  purpose:
    Type: String
    Default: assessment-2
    Description: Purpose tag value

Resources:
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      SubnetId: !Select
        - 0
        - !Ref Subnets
      SecurityGroupIds:
        - !GetAtt InstanceSecurityGroup.GroupId
      KeyName: !Ref KeyName
      IamInstanceProfile: CAB432-Instance-Role
      NetworkInterfaces:
        - DeviceIndex: 0
          SubnetId: !Ref SubnetId
          AssociatePublicIpAddress: true
          GroupSet:
            - sg-032bd1ff8cf77dbb9
      Tags:
        - Key: Name
          Value: A2-Group4-EC2
        - Key: purpose
          Value: !Ref purpose
        - Key: qut-username
          Value: !Ref QutUsername
        - Key: qut-username2
          Value: !Ref QutUsername2
      UserData: !Base64 |
        #!/bin/bash
        set -euxo pipefail

        # Non-interactive apt
        export DEBIAN_FRONTEND=noninteractive

        # wait for apt/dpkg locks
        until ! fuser /var/lib/dpkg/lock-frontend >/dev/null 2>&1; do
          echo "Waiting for dpkg lock?"; sleep 3
        done

        # Update package lists
        sudo apt-get update -y
        sudo apt-get install -y ca-certificates curl unzip

        # Add Docker's official GPG key:
        sudo install -m 0755 -d /etc/apt/keyrings
        sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
        sudo chmod a+r /etc/apt/keyrings/docker.asc

        # Add the repository to Apt sources:
        echo \
          "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
          $(. /etc/os-release && echo "${UBUNTU_CODENAME:-$VERSION_CODENAME}") stable" | \
          sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
        sudo apt-get update -y

        # Install Docker Engine from Ubuntu repos + Compose v2 plugin
        sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

        # Enable and start Docker
        systemctl enable --now docker

        # Allow the default Ubuntu user to run docker without sudo
        usermod -aG docker ubuntu

        # Install AWS cli
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip awscliv2.zip

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: A2-Group4-UserPool
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          TemporaryPasswordValidityDays: 7
      Schema:
        - Name: email
          AttributeDataType: String
          Mutable: true
          Required: true
          StringAttributeConstraints:
            MinLength: "0"
            MaxLength: "2048"
        - Name: email_verified
          AttributeDataType: Boolean
          Mutable: true
          Required: false
      AutoVerifiedAttributes:
        - email
      VerificationMessageTemplate:
        DefaultEmailOption: "CONFIRM_WITH_CODE"
      EmailConfiguration:
        EmailSendingAccount: "DEVELOPER"
        SourceArn: "arn:aws:ses:ap-southeast-2:901444280953:identity/cab432.com"
        From: "CAB432 logins <logins@cab432.com>"
      EmailVerificationMessage: "Your verification code is {####}."
      EmailVerificationSubject: CAB432 - Please verify your email
      UserAttributeUpdateSettings:
        AttributesRequireVerificationBeforeUpdate: []
      UsernameConfiguration:
        CaseSensitive: false
      UserPoolTags:
        qut-username: !Ref QutUsername
        qut-username2: !Ref QutUsername2
        purpose: !Ref purpose

  AdminPool:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: Admin
      UserPoolId: !Ref UserPool
      Description: Group for administrators
      Precedence: 1 # Lower precedence means higher priority for IAM role assignment

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      GenerateSecret: true
      ExplicitAuthFlows:
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_PASSWORD_AUTH

  UploadsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: a2group4-uploadsbucket223

  ParamUserPoolId:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /a2group4/cognito/userPoolID
      Type: String
      Value: !Ref UserPool
      Tags:
        qut-username: !Ref QutUsername
        qut-username2: !Ref QutUsername2
        purpose: !Ref purpose

  ParamUserPoolClientId:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /a2group4/cognito/clientID
      Type: String
      Value: !Ref UserPoolClient
      Tags:
        qut-username: !Ref QutUsername
        qut-username2: !Ref QutUsername2
        purpose: !Ref purpose

Outputs:
  InstanceId:
    Description: InstanceId of the newly created EC2 instance
    Value: !Ref EC2Instance

  AZ:
    Description: Availability Zone
    Value: !GetAtt EC2Instance.AvailabilityZone 