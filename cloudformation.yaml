AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Launch an Ubuntu EC2 instance for Assessment 2 (Group 4) with IAM instance profile,
  subnet, security groups, tags, and bootstrap (git + Node/npm + Docker + compose).

Parameters:
  ImageId:
    Type: AWS::EC2::Image::Id
    Default: ami-0279a86684f669718
    Description: Ubuntu AMI ID to use (must be valid in target region)

  InstanceType:
    Type: String
    Default: t3.medium
    AllowedPattern: ^[a-z0-9.]+$
    Description: EC2 instance type

  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Default: group4-n11288353+n8319065
    Description: Existing EC2 key pair name

  SubnetId:
    Type: AWS::EC2::Subnet::Id
    Default: subnet-075811427d5564cf9
    Description: Subnet to place the instance in

  InstanceProfileArn:
    Type: String
    Default: arn:aws:iam::901444280953:instance-profile/CAB432-instance-role
    Description: ARN of an existing IAM Instance Profile to attach

Resources:
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref ImageId
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      IamInstanceProfile: !Ref InstanceProfileArn
      NetworkInterfaces:
        - DeviceIndex: 0
          SubnetId: !Ref SubnetId
          AssociatePublicIpAddress: true
          GroupSet:
            - sg-0dcf6ec18faf2c4d41
            - sg-032bd1ff8cf77dbb9
      Tags:
        - Key: Name
          Value: A2-Group4-EC2
        - Key: purpose
          Value: assessment-2
        - Key: qut-username
          Value: n11288353@qut.edu.au
        - Key: qut-username2
          Value: n8319065@qut.edu.au
      UserData:
        Fn::Base64: |
          #!/bin/bash
          set -euxo pipefail

          # Update base packages
          apt-get update -y
          apt-get install -y git ca-certificates curl

          # Clone repo as ubuntu user
          runuser -l ubuntu -c "git clone https://github.com/Renanya/A2 /home/ubuntu/A2"

          # Install Node.js + npm (Node 18.x) and build tools
          curl -fsSL https://deb.nodesource.com/setup_18.x | bash -
          apt-get install -y nodejs build-essential

          # Install backend dependencies with npm as ubuntu
          runuser -l ubuntu -c "cd /home/ubuntu/A2/backend && npm install"

          # Run custom S3 setup script
          runuser -l ubuntu -c "cd /home/ubuntu/A2 && node ./backend/middleware/aws_setup_s3.js"

          # Docker setup (official repo)
          install -m 0755 -d /etc/apt/keyrings
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
          chmod a+r /etc/apt/keyrings/docker.asc

          echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
          $(. /etc/os-release && echo \"${UBUNTU_CODENAME:-$VERSION_CODENAME}\") stable" > /etc/apt/sources.list.d/docker.list

          apt-get update -y
          apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

          # Add ubuntu user to docker group (takes effect for new sessions)
          usermod -aG docker ubuntu

          # Bring up the stack with docker compose as ubuntu (detached)
          runuser -l ubuntu -c "cd /home/ubuntu/A2 && docker compose up --build -d"

Outputs:
  InstanceId:
    Description: Launched EC2 instance ID
    Value: !Ref EC2Instance

  PublicIp:
    Description: Public IPv4 of the instance
    Value: !GetAtt EC2Instance.PublicIp

  AZ:
    Description: Availability Zone
    Value: !GetAtt EC2Instance.AvailabilityZone
